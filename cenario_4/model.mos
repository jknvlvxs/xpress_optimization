model Trab3_2024
uses "mmxprs"; !gain access to the Xpress-Optimizer solver

setparam("XPRS_MIPRELSTOP",1.0e-08)

declarations
  nCid = 16                       ! Número de cidades
  nsp = 4                         ! Número de subprodutos do petróleo
  MaxPetr = 4666000               ! Produção de petróleo em Macaé
  CapRefino = 500000              ! Capacidade de cada refinaria
  CustoInst = 100000000           ! Custo de cada refinaria (barris/dia)
  CTP = 0.40                      ! Custo de Transporte do petróleo (m3/km)
  CTS = 4.55                      ! Custo de Transporte dos subprodutos (m3/km)
  Cid = 1..nCid
  sp = 1..nsp                     ! subprodutos (Diesel, Gasolina, GLP, QAV)
  sSP: array(sp) of string        ! Nomes dos subprodutos
  sCid: array(Cid) of string
  POP: array(Cid) of integer      ! População das cidades
  D1: array(Cid) of integer       ! Distâncias entre as 16 cidades e a cidade de Macaé
  D2: array(Cid,Cid) of integer   ! Distâncias entre as 16 cidades
  Cons: array(sp) of real         ! Consumo médio per capita (litros/dia)
  Trns: array(sp) of real         ! Aproveitamento por subproduto
  DemJK: array(Cid,sp) of real    ! Demanda de subproduto para cada cidade
  y: array(Cid) of mpvar
  x1: array(Cid) of mpvar         ! m3 de petróleo transportados
  x2: array(Cid,Cid,sp) of mpvar  ! % da demanda de subprodutos transportados
  x2c4: array(Cid,Cid) of mpvar  ! % da demanda de subprodutos transportados
  CFixo, C1, C2, CTot: mpvar      ! Custos calculados
  sobra, tot, vx2: real
end-declarations

sSP:: ["Diesel", "Gasolina", "GLP", "Naftas"]

Cons:: [1.78, 1.80, 0.85, 1.37]

Trns:: [0.34, 0.23, 0.08, 0.08]

! Nomes das cidades
sCid:: ["Angra dos Reis",
        "Belo Horizonte",
        "Cabo Frio",
        "Campo Grande",
        "Caruaru",
        "Fortaleza",
        "Hortolândia",
        "Indaiatuba",
        "Lauro de Freitas",
        "Magé",
        "Passo Fundo",
        "Porto Alegre",
        "Recife",
        "Salvador",
        "São Luís",
        "São Vicente"]

! Populações
POP:: [210171, 2530701, 234077, 916001, 369343, 2703391, 237570, 260690, 204669, 247741, 206103, 1492530, 1661017, 2900319, 1115932, 370839]

! Distâncias até Macaé
D1:: [252, 332, 50, 1327, 1676, 2085, 543, 547, 1109, 122, 1240, 1262, 1747, 1093, 2199, 489]

! Matriz de distâncias
D2:: [5,    359,  231,  1113, 1867, 2235, 307,  305,  1296, 130,  994,  1032, 1946, 1279, 2282, 237,
      359,  5,    369,  1116, 1548, 1885, 470,  487,  983,  309,  1260, 1338, 1636, 964,  1924, 513,
      231,  369,  5,    1327, 1725, 2136, 533,  534,  1158, 112,  1207, 1222, 1794, 1142, 2249, 466,
      1113, 1116, 1327, 5,    2416, 2543, 810,  818,  1928, 1215, 891,  1113, 2528, 1907, 2278, 932,
      1867, 1548, 1725, 2416, 5,    577,  2011, 2031, 570,  1759, 2803, 2886, 122,  587,  1120, 2059,
      2235, 1885, 2136, 2543, 577,  5,    2314, 2337, 1013, 2145, 3087, 3204, 625,  1023, 655,  2393,
      307,  470,  533,  810,  2011, 2314, 5,    25,   1450, 422,  792,  889,  2102, 1431, 2271, 148,
      305,  487,  534,  818,  2031, 2337, 25,   5,    1469, 425,  772,  866,  2122, 1450, 2296, 128,
      1296, 983,  1158, 1928, 570,  1013, 1450, 1469, 5,    1188, 2242, 2318, 653,  20,   1322, 1492,
      130,  309,  112,  1215, 1759, 2145, 422,  425,  1188, 5,    1124, 1154, 1834, 1172, 2224, 367,
      994,  1260, 1207, 891,  2803, 3087, 792,  772,  2242, 1124, 5,    227,  2895, 2223, 2974, 766,
      1032, 1338, 1222, 1113, 2886, 3204, 889,  866,  2318, 1154, 227,  5,    2970, 2299, 3130, 826,
      1946, 1636, 1794, 2528, 122,  625,  2102, 2122, 653,  1834, 2895, 2970, 5,    671,  1208, 2145,
      1279, 964,  1142, 1907, 587,  1023, 1431, 1450, 20,   1172, 2223, 2299, 671,  5,    1321, 1473,
      2282, 1924, 2249, 2278, 1120, 655,  2271, 2296, 1322, 2224, 2974, 3130, 1208, 1321, 5,    2382,
      237,  513,  466,  932,  2059, 2393, 148,  128,  1492, 367,  766,  826,  2145, 1473, 2382, 5]


! Calcular demandas
forall (j in Cid, k in sp) do
  DemJK(j,k) := Cons(k) * POP(j) / 1000
end-do

! Composição da FO:
CFixo = sum(i in Cid) CustoInst * y(i)							  ! Custo de instalação das refinarias em cada cidade
C1 = sum(i in Cid) CTP * x1(i) * D1(i)						    ! Custo de transporte de petróleo para cada refinaria
C2 = sum(i in Cid, j in Cid, k in sp) CTS * D2(i,j) * x2(i,j,k) * DemJK(j,k)		! Custo de transporte de subprodutos para cada cidade consumidora
CTot = CFixo + C1 + C2

! Restrições
forall(i in Cid) y(i) is_binary                               ! Restrição de y como binário
sum(i in Cid) x1(i) <= MaxPetr * 160 / 1000						        ! Capacidade da fábrica
forall (j in Cid, k in sp) sum(i in Cid) x2(i,j,k) = 1		    ! Demanda das cidades consumidoras
forall (i in Cid, k in sp) x1(i) * Trns(k) >= sum(j in Cid) x2(i,j,k) * DemJK(j,k)		! Produção de subprodutos nas refinarias
forall (i in Cid) x1(i) <= CapRefino * 160 / 1000 * y(i) 			! Capacidade de cada refinaria


! Resolver modelo
writeln("Begin running model")
minimize(CTot)
writeln("End running model")

! Imprimir solução
writeln
writeln("--------------------------------------------------")
! Mostra solução
writeln("")
writeln("Custo total:                     ", strfmt( getsol( CTot ), 14, 2 ))
writeln("Custo Refinarias:                ", strfmt( getsol( CFixo ), 14, 2 ))
writeln("Custo Transporte petroleo:       ", strfmt( getsol( C1 ), 14, 2 ))
writeln("Custo de Transporte subprodutos: ", strfmt( getsol( C2 ), 14, 2 ))
writeln("")
writeln("Refinarias instaladas:")
writeln("")
tot := 0.0
forall (i in Cid) do
  if getsol(x1(i)) > 0.1 then
    tot := tot + getsol(x1(i))
    writeln( strfmt( sCid(i), -19 ), ": ", strfmt( getsol( x1(i) ), 10, 1 ))
  end-if
end-do
sobra := MaxPetr - tot
writeln("---------------------------------")
writeln("Total de petróleo  : ", strfmt( tot, 10, 1 ))
writeln("Sobra de petróleo  : ", strfmt( sobra, 10, 1 ))
writeln("")
writeln("Envio total e sobra de subprodutos:")
writeln("")
forall (i in Cid) do
  forall (k in sp) do
    tot := 0.0
    forall(j in Cid) do
      vx2 := getsol( x2(i,j,k) )
      tot := tot + vx2*DemJK(j,k)
    end-do
    if getsol( tot ) > 1 then
      sobra := getsol( x1(i) ) * Trns(k) - tot
      writeln("Refinaria ", strfmt( sCid( i ), -19 ), ": ", strfmt( sSP( k ), -9 ), ": ", strfmt( tot , 8, 2 ), "   Sobra: ", strfmt( sobra, 8, 2 ) )
    end-if
  end-do
end-do
writeln("")
writeln("Quantidades transportadas dos subprodutos:")
writeln("")
forall (i in Cid) do
  forall (j in Cid) do
    forall (k in sp) do
      vx2 := getsol( x2(i,j,k) )
      if (vx2 > 0.0001) then
        writeln( k, ": ", strfmt( sCid(i), -19 ), " --> ", strfmt( sCid(j), -19 ), ": ", strfmt( sSP( k ), -8 ), ": ", strfmt( vx2*DemJK(j,k), 8, 2 ));
      end-if
    end-do
  end-do
end-do
writeln("----------------------------------------------------------------")

end-model
