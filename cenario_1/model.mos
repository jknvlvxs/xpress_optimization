model Trab3_2024
uses "mmxprs"; !gain access to the Xpress-Optimizer solver

setparam("XPRS_MIPRELSTOP",1.0e-08)

declarations
  nCid = 16                       ! Número de cidades
  nsp = 4                         ! Número de subprodutos do petróleo
  MaxPetr = 4666000               ! Produção de petróleo em Macaé
  CapRefino = 500000              ! Capacidade de cada refinaria
  CustoInst = 100000000           ! Custo de cada refinaria
  CTP = 0.40                      ! Custo de Transporte do petróleo (m3/km)
  CTS = 4.55                      ! Custo de Transporte dos subprodutos (m3/km)
  Cid = 1..nCid
  sp = 1..nsp                     ! subprodutos (Diesel, Gasolina, GLP, QAV)
  sSP: array(sp) of string        ! Nomes dos subprodutos
  sCid: array(Cid) of string
  POP: array(Cid) of integer      ! População das cidades
  D1: array(Cid) of integer       ! Distâncias entre as 16 cidades e a cidade de Macaé
  D2: array(Cid,Cid) of integer   ! Distâncias entre as 16 cidades
  Cons: array(sp) of real         ! Consumo médio per capita (litros/dia)
  Trns: array(sp) of real         ! Aproveitamento por subproduto
  DemJK: array(Cid,sp) of real    ! Demanda de subproduto para cada cidade
  y: array(Cid) of mpvar
  x1: array(Cid) of mpvar         ! m3 de petróleo transportados
  x2: array(Cid,Cid,sp) of mpvar  ! % da demanda de subprodutos transportados
  x2c4: array(Cid,Cid) of mpvar   ! % da demanda de subprodutos transportados
  CFixo, C1, C2, CTot: mpvar      ! Custos calculados
  sobra, tot, vx2: real
end-declarations

sSP:: ["Diesel", "Gasolina", "GLP", "Naftas"]

Cons:: [1.78, 1.80, 0.85, 1.37]

Trns:: [0.34, 0.23, 0.08, 0.08]

! Nomes das cidades
sCid:: [...]

! Populações
POP:: [...]

! Distâncias até Macaé
D1:: [...]

! Matriz de distâncias
D2:: [...]

! Calcular demandas
forall (j in Cid, k in sp) do
  DemJK(j,k) := Cons(k) * POP(j) / 1000
end-do

! Composição da FO:

CFixo := sum(i in Cid) CustoInst * y(i)							! Custo de instalação das refinarias em cada cidade
C1 := sum(i in Cid) * CTP * D1(i) * x1(i)						! Custo de transporte de petróleo para cada refininaria
C2 := sum(i in Cid, j in Cid, k in sp) * CTS * D2(i,j) * x2(i,j,k) * DemJK(j,k)		! Custo de transporte de subprodutos para cada consumidor
CTot := CFixo + C1 + C2

! Restrições

! Resolver modelo
writeln("Begin running model")
minimize(CTot)
writeln("End running model")

! Imprimir solução
writeln
writeln("--------------------------------------------------")
! Mostra solução
writeln("")
writeln("Custo total:                     ", strfmt( getsol( CTot ), 14, 2 ))
writeln("Custo Refinarias:                ", strfmt( getsol( CFixo ), 14, 2 ))
writeln("Custo Transporte petroleo:       ", strfmt( getsol( C1 ), 14, 2 ))
writeln("Custo de Transporte subprodutos: ", strfmt( getsol( C2 ), 14, 2 ))
writeln("")
writeln("Refinarias instaladas:")
writeln("")
tot := 0.0
forall (i in Cid) do
  if getsol(x1(i)) > 0.1 then
    tot := tot + getsol(x1(i))
    writeln( strfmt( sCid(i), -19 ), ": ", strfmt( getsol( x1(i) ), 10, 1 ))
  end-if
end-do
sobra := MaxPetr - tot
writeln("---------------------------------")
writeln("Total de petróleo  : ", strfmt( tot, 10, 1 ))
writeln("Sobra de petróleo  : ", strfmt( sobra, 10, 1 ))
writeln("")
writeln("Envio total e sobra de subprodutos:")
writeln("")
forall (i in Cid) do
  forall (k in sp) do
    tot := 0.0
    forall(j in Cid) do
      vx2 := getsol( x2(i,j,k) )
      tot := tot + vx2*DemJK(j,k)
    end-do
    if getsol( tot ) > 1 then
      sobra := getsol( x1(i) ) * Trns(k) - tot
      writeln("Refinaria ", strfmt( sCid( i ), -19 ), ": ", strfmt( sSP( k ), -9 ), ": ", strfmt( tot , 8, 2 ), "   Sobra: ", strfmt( sobra, 8, 2 ) )
    end-if
  end-do
end-do
writeln("")
writeln("Quantidades transportadas dos subprodutos:")
writeln("")
forall (i in Cid) do
  forall (j in Cid) do
    forall (k in sp) do
      vx2 := getsol( x2(i,j,k) )
      if (vx2 > 0.0001) then
        writeln( k, ": ", strfmt( sCid(i), -19 ), " --> ", strfmt( sCid(j), -19 ), ": ", strfmt( sSP( k ), -8 ), ": ", strfmt( vx2*DemJK(j,k), 8, 2 ));
      end-if
    end-do
  end-do
end-do
writeln("----------------------------------------------------------------")

end-model
